#  -------
#  CXI API:   
#  -------
#  Specify here the location of the cxi-API configuration file, the
#  cryptographic user name dealing with the sign-requests. Specify which group The user belongs to and
#  which key should be used for signing.
# !! HSM device adresses have to be specified in the CxiConfigFile. In CxiConfigFile 
# !! you add a line: Device = 192.168.xxx.xxx 192.168.xxx.yyy 192.168.xxx.zzz
# !! or if you intend to use Utimaco's HSM simulator add/uncomment: Device = 3001@127.0.0.1 3003@127.0.0.1 

# {CxiConfigFile}:   path to CXI configuration file location
CxiConfigFile    =   ../etc/cxi.cfg

# {CryptoUser}   :   cryptographic user name
CryptoUser       =   myUSER

# {UserPassword} :   password of cryptographic user 
UserPassword     =   123456

# {UserGroup}    :   group of cryptographic user
UserGroup        =   sample

# {KeyName}      :   RSA or ECDSA key name which shall be used and which belongs to UserGroup
KeyName          =   cxi LB key


#  --------
#  REQUESTS :   
#  --------
#  Specify here the total number of requests you want as an example to be processed. 

# {NrOfRequests} :   total number of requests: [integer > 0]
NrOfRequests     =   500

#  -----------------
#  REQUEST FREQUENCY :   
#  -----------------
# !! In this section the time interval of incoming requests can be specified.
# !! Remark that only very simple distributions are chosen here for the SAKE OF SIMPLICITY !!
# !! Adapt/expand the source code to simulate the time interval sequence or
# !! distribution of your interest.
 
# {WaitingTimeDistribution}  :   request arrival frequency, options are: [uniform, exponential]
WaitingTimeDistribution      =   exponential

# {WaitingTimeMean}          :   mean waiting time between arriving requests in [ms]: [integer > 0] 
WaitingTimeMean              =   15

#  ----------------
#  TYPE OF REQUESTS :    
#  ----------------
# !! In this section the time needed to finish one request can be varied.
# !! For the SAKE OF SIMPLICITY, only a sign transaction is implemented. This transaction can
# !! be repeated to simulate more complex requests or "request bundles" or a simple request type dsitributions.
# !! Please adapt the code, if you need other cryptographic operations or other type distributions or 
# !! use the example as is, if you only want to "get a feeling" or rough estimates.

# {TransactionRepeats}       :   Number of times the transaction is repeated: [integer > 0] 
#                                -> representing a transaction bundle
TransactionRepeats           =   10

# {RepeatFactors}            :   Have a distribution of different transaction bundle size: 
#                                comma sepearted [integer > 0]
#                                Each integer in the comma seperated list is equally likely to be chosen
#                    Example :   10,1,1
#                                1/3 of all requests have: 10*TransactionRepeats
#                                2/3 of all requests have:  1*TransactionRepeats
RepeatFactors                =   10,1,1

#  ------
#  LIMITS :    
#  ------

# {MaximumContainerSize}     :   Request container size won't grow beyond this value:  [integer > 0] 
MaximumContainerSize         =   1000




